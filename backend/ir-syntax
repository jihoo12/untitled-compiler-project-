--- IR Syntax Definition ---
--syntax
 prefix command
 -example
  m,i a > b ## a = 64bit address,b=64bit immediate value 
  r,r-i a > b ## a = 64bit register,b= 64bit register-immediate value (ex r r-i rax > rax-1)
  s,r base+(index*scale)+displacement > b (ex s r rbx+(rcx*4)+8 > rax)
--command
 -arithmetic instructions
  a-b ## assembly sub a,b ,not available prefix a={i},b={}
  a+b ## assembly add a,b ,not available prefix a={i},b={}
  a*b ## assembly mul a,b ,not available prefix a={i},b={}
  a/b ## assembly div a,b ,not available prefix a={i},b={}
  a & b ## assembly and a,b ,not available prefix a={i},b={}
  a | b ## assembly or a,b ,not available prefix a={i},b={}
  a ^ b ## assembly xor a,b ,not available prefix a={i},b={}
  ~a ## assembly not a not available prefix a={i}
  shl a b ## left shit (b=immediate value),not available prefix a={i}
  shr a b ## right shit (b=immediate value),not available prefix a={i}
  rol a b ## rotate left (b=immediate value),not available prefix a={i}
  ror a b ## rotate right (b=immediate value),not available prefix a={i}
 -unconditional jump instruction
  .a ## call a (a = 64bit address)
  jmp a ## jmp a (a = 64bit address)
 -conditional branch instructions
  a == b ## compare a and b not available prefix a={i},b={}
  =a ## if zero flags set then jump a (a = 64bit address)
  !a ## if zero flags not set then jump  a (a=64bit register)
  JG a ##(a=64bit address) 
  JA a ##(a=64bit address)
  JL a ##(a=64bit address)
  JB a ##(a=64bit address)
  JO a ##(a=64bit address)
  JNO a ##(a=64bit address)
  JS a ##(a=64bit address)
  JNS a ##(a=64bit address)
  JC a ##(a=64bit address)
  JNC a ##(a=64bit address)
 -control flow instructions
  enter ## assembly enter
  @ ## assembly ret
  leave ## assembly leave
  syscall ## assembly syscall
 -data transfer instructions
  a > b ## put a to b ,not available prefix a={},b={i}
  push a ## assembly push a
  pop a ## assembly pop b ,not available prefix a={i}
--prefix
 m ## use memory address 
 s ## use sib address 
 i ## use immediate value 
 r-i ## use 64bit register-immediate value(r-i = memory address)
 r+i ## use 64bit register+immediate value(r+i = memory address)
 r ## 64bit register prefix 
 n ## no prefix use
--pland
 JG
 JA
 JL
 JB
 JO
 JNO
 JS
 JNS
 JC
 JNC
--notes
 sib Effective Address=Base+(IndexÃ—Scale)+Displacement
JG (Jump if Greater): Jumps if the first operand is greater than the second operand in a signed comparison.
JA (Jump if Above): Jumps if the first operand is greater than the second operand in an unsigned comparison.
JL (Jump if Less): Jumps if the first operand is less than the second operand in a signed comparison.
JB (Jump if Below): Jumps if the first operand is less than the second operand in an unsigned comparison.
JO (Jump if Overflow): Jumps if the overflow flag (OF) is set.
JNO (Jump if Not Overflow): Jumps if the overflow flag (OF) is not set.
JS (Jump if Sign): Jumps if the sign flag (SF) is set, indicating a negative result.
JNS (Jump if Not Sign): Jumps if the sign flag (SF) is not set, indicating a non-negative result.
JC (Jump if Carry): Jumps if the carry flag (CF) is set.
JNC (Jump if Not Carry): Jumps if the carry flag (CF) is not set.
JZ (Jump if Zero): Jumps if the zero flag (ZF) is set, indicating equality or a zero result.
JNZ (Jump if Not Zero): Jumps if the zero flag (ZF) is not set, indicating inequality or a non-zero result.
---